# 题目
The set [1,2,3,...,n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

集合[1,2,3,...,n]包含n！个不同的排列

通过按顺序列举和标记所有的排列，我们可以得到n=3 下的序列 "123""132""213""231""312""321",给定一个n和k，在n!排列中
返回第k个排列顺序

# 示例

给定n=3，k=3，所有排列顺序为"123""132""213""231""312""321"，第3个序列为"213"


#思路

1.深搜遍历所有的排列，返回第k个，但这种方式会超时
2.n个数据的排列方式为

1+[2,3,...,n]
2+[1,3,...,n]
...
n+[1,2,...,n-1]

将n个数字放进list中

即每组都会有(n-1)!个排列，首先找到list中第一个数字，位置为 (k-1)/(n-1)!

取到后将其从list中该位置的数字取出，这样问题转化为 查找剩下n-1个数的所有排列中 第 （k-1)-(k-1)/(n-1)!*（n-1)/(n-2)!该问题

以此类推 最终取出n个数字转为字符串即可

# 代码实现

public String getPermutation(int n, int k) {
        int fact = 1;
        StringBuilder sb = new StringBuilder();
        List<Integer> nums = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            fact *= i;
            nums.add(i);
        }
        for (int i = 0, l = k - 1; i < n; i++) {
            fact /= (n-i);
            int index = l / fact;
            sb.append(nums.remove(index));
            l -= (index * fact);
        }
        return sb.toString();
}
